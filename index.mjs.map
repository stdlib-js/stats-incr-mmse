{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar incrmmean = require( '@stdlib/stats-incr-mmean' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean squared error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmse( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 17.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 33.0\n*\n* m = accumulator();\n* // returns 33.0\n*/\nfunction incrmmse( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean squared error. If not provided input values, the accumulator function returns the current mean squared error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean squared error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tr = y - x;\n\t\treturn mean( r*r );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean squared error (MSE) incrementally.\n*\n* @module @stdlib/stats-incr-mmse\n*\n* @example\n* var incrmmse = require( '@stdlib/stats-incr-mmse' );\n*\n* var accumulator = incrmmse( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 17.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 33.0\n*\n* m = accumulator();\n* // returns 33.0\n*/\n\n// MODULES //\n\nvar incrmmse = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmse;\n"],"names":["isPositiveInteger","require$$0","isPrimitive","incrmmean","require$$1","format","require$$2","lib","W","mean","TypeError","x","y","r","arguments","length"],"mappings":";;mQAsBA,IAAIA,EAAoBC,EAAgDC,YACpEC,EAAYC,EACZC,EAASC,EA8Db,IC9BAC,EDCA,SAAmBC,GAClB,IAAIC,EACJ,IAAMT,EAAmBQ,GACxB,MAAM,IAAIE,UAAWL,EAAQ,kEAAmEG,IAGjG,OADAC,EAAON,EAAWK,GAWlB,SAAsBG,EAAGC,GACxB,IAAIC,EACJ,GAA0B,IAArBC,UAAUC,OACd,OAAON,IAGR,OAAOA,GADPI,EAAID,EAAID,GACOE"}